// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "url/mojom/url.mojom";
import "url/mojom/origin.mojom";

// Implementation of the proposed FedCM API.
//
// Proposal: https://fedidcg.github.io/FedCM/

// Represents the fetch result from a federated authentication request. It is
// used to determine whether a JavaScript exception should be thrown, and what
// the error message of such exception should say. This enum is a subset of
// FederatedAuthRequestResult in
// third_party/blink/public/mojom/devtools/inspector_issue.mojom.
enum RequestTokenStatus {
  kSuccess,
  kApprovalDeclined,
  kErrorTooManyRequests,
  kErrorCanceled,
  kError,
};

// Represents the fetch result from a federated user info request. It is
// used to determine whether a JavaScript exception should be thrown, and what
// the error message of such exception should say.
enum RequestUserInfoStatus {
  kSuccess,
  kErrorTooManyRequests,
  kError,
};

enum LogoutRpsStatus {
  kSuccess,
  kErrorTooManyRequests,
  kError,
};

enum IdpSigninStatus {
  kSignedIn,
  kSignedOut
};

enum RpContext {
  kSignIn,
  kSignUp,
  kUse,
  kContinue
};

// The details of a single logout request from an identity provider.
struct LogoutRpsRequest {
  // URL to which the request will be sent. The origin is validated to
  // have an associated active session.
  url.mojom.Url url;

  // Identifier for the account being logged out. This is used to verify that
  // the logout request correlates to a previous sign-in event, and will
  // result in the corresponding active session being terminated.
  string account_id;
};

// The login hint for this identity provider. Used by the relying party to
// specify some data about the user account they would like to show in the
// FedCM dialog.
struct IdentityProviderLoginHint {
  // The strings can be empty when not provided.
  string email;

  string id;

  // Whether the hint should be required or not. If required, the user agent can
  // show other accounts if there is no account matching the hint. Otherwise,
  // the user agent should not show other accounts in case no match is found.
  bool is_required;
};

// The details of an identity provider.
struct IdentityProviderConfig {
  url.mojom.Url config_url;

  // Can be an empty string to be omitted in the request sent to the provider.
  string client_id;

  // Can be an empty string to be omitted in the request sent to the provider.
  string nonce;

  // This field is not sent to the provider, but rather used by the user agent.
  IdentityProviderLoginHint login_hint;
};

// The list of user information that can be returned to an identity provider during a UserInfo API call.
struct IdentityUserInfo {
  string email;
  string given_name;
  string name;
  string picture;
};

// The parameters for a get call for identity provider(s).
struct IdentityProviderGetParameters {
  // Details of identity provider(s).
  array<IdentityProviderConfig> providers;

  // Whether auto sign in is preferred by the caller.
  bool prefer_auto_sign_in;

  // Controls the wording of the FedCM prompt.
  // TODO(crbug.com/1335237): consider moving this up to IdentityProviderConfig
  // when/if we support the Context API for Multiple IdPs at a time.
  RpContext context;
};

// Create a federated sign-in request using the specified provider.
// This interface is called from a renderer process and implemented in the
// browser process.
interface FederatedAuthRequest {
  // Requests a token to be generated, given an array of
  // IdentityProviderGetParameters.
  // Returns:
  // - Status of token request.
  // - Configuration URL of the identity provider that the user selected.
  //   A null URL is returned if the token request failed or did not occur due
  //   to an error earlier in the flow.
  // - Raw content of the token.
  RequestToken(array<IdentityProviderGetParameters> idp_get_params) =>
      (RequestTokenStatus status,
      url.mojom.Url? selected_identity_provider_config_url,
      string? token);

  // Requests user info to be generated, given an IDP config.
  // Returns an IdentityUserInfo for each of the user's accounts.
  RequestUserInfo(IdentityProviderConfig provider) =>
      (RequestUserInfoStatus status, array<IdentityUserInfo>? user_info);

  // Cancels the pending token request, if any.
  CancelTokenRequest();

  // Contact the list of Relying Party logout endpoints and account IDs to
  // attempt to initiate user logout.
  LogoutRps(array<LogoutRpsRequest> rp_logout_requests) => (LogoutRpsStatus status);

  // Marks the user as logged in/out to the IDP on this origin.
  SetIdpSigninStatus(url.mojom.Origin origin, IdpSigninStatus status);
};
