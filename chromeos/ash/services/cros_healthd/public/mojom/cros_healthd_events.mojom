// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Definitions for the event API exposed by the cros_healthd daemon. This API is
// normally consumed by the browser.

// NOTE: This mojom should be kept in sync with the copy in Chromium OS's repo
// in src/platform2/diagnostics/mojom/public/cros_healthd_events.mojom.

module ash.cros_healthd.mojom;

// Implemented by clients who desire Bluetooth notifications.
//
// NextMinVersion: 1, NextIndex: 6
[Stable]
interface CrosHealthdBluetoothObserver {
  // Fired when a Bluetooth adapter is added.
  OnAdapterAdded@0();
  // Fired when a Bluetooth adapter is removed.
  OnAdapterRemoved@1();
  // Fired when a property of a Bluetooth adapter is changed.
  OnAdapterPropertyChanged@2();
  // Fired when a Bluetooth device is added.
  OnDeviceAdded@3();
  // Fired when a Bluetooth device is removed.
  OnDeviceRemoved@4();
  // Fired when a property of a Bluetooth device is changed.
  OnDevicePropertyChanged@5();
};

// Implemented by clients who desire lid notifications.
//
// NextMinVersion: 1, NextIndex: 2
[Stable]
interface CrosHealthdLidObserver {
  // Fired when the device's lid is closed.
  OnLidClosed@0();
  // Fired when the device's lid is opened.
  OnLidOpened@1();
};

// Implemented by clients who desire power notifications.
//
// NextMinVersion: 1, NextIndex: 4
[Stable]
interface CrosHealthdPowerObserver {
  // Fired when the device begins consuming from an external power source.
  OnAcInserted@0();
  // Fired when the device stops consuming from an external power source.
  OnAcRemoved@1();
  // Fired when the system receives a suspend request.
  OnOsSuspend@2();
  // Fired when the system completes a suspend request.
  OnOsResume@3();
};

// Implemented by clients who desire audio notifications.
//
// NextMinVersion: 1, NextIndex: 2
[Stable]
interface CrosHealthdAudioObserver {
  // Fired when the audio underrun happens.
  OnUnderrun@0();
  // Fired when the audio severe underrun happens.
  OnSevereUnderrun@1();
};

// Implemented by clients who desire Thunderbolt notifications.
//
// NextMinVersion: 1, NextIndex: 4
[Stable]
interface CrosHealthdThunderboltObserver {
  // Fired when the Thunderbolt plug in.
  OnAdd@0();
  // Fired when the Thunderbolt plug out.
  OnRemove@1();
  // Fired when the Thunderbolt device is authorized.
  OnAuthorized@2();
  // Fired when the Thunderbolt device is unauthorized.
  OnUnAuthorized@3();
};

// USB event info.
//
// NextMinVersion: 2, NextIndex: 6
[Stable]
struct UsbEventInfo {
  // Vendor name.
  string vendor@0;
  // Name, model name, product name.
  string name@1;
  // Vendor ID.
  uint16 vid@2;
  // Product ID.
  uint16 pid@3;
  // USB device categories.
  // https://www.usb.org/defined-class-codes
  array<string> categories@4;

  [Stable, Extensible]
  enum State {
    // This is required for backwards compatibility, should not be used.
    [Default] kUnmappedEnumField = 0,
    // Usb plugs in.
    kAdd = 1,
    // Usb unplugs.
    kRemove = 2,
  };

  [MinVersion=1] State state@5;
};

// Implemented by clients who desire USB notifications.
//
// NextMinVersion: 1, NextIndex: 2
[Stable]
interface CrosHealthdUsbObserver {
  // Fired when the USB plug in.
  OnAdd@0(UsbEventInfo info);
  // Fired when the USB plug out.
  OnRemove@1(UsbEventInfo info);
};

// Thunderbolt event info.
//
// NextMinVersion: 1, NextIndex: 1
[Stable]
struct ThunderboltEventInfo {
  [Stable, Extensible]
  enum State {
    // This is required for backwards compatibility, should not be used.
    [Default] kUnmappedEnumField = 0,
    // Thunderbolt plug in.
    kAdd = 1,
    // Thunderbolt plug out.
    kRemove = 2,
    // Thunderbolt device is authorized.
    kAuthorized = 3,
    // Thunderbolt device is unauthorized.
    kUnAuthorized = 4,
  };

  State state@0;
};

// Lid event info.
//
// NextMinVersion: 1, NextIndex: 1
[Stable]
struct LidEventInfo {
  [Stable, Extensible]
  enum State {
    // This is required for backwards compatibility, should not be used.
    [Default] kUnmappedEnumField = 0,
    // Lid closed.
    kClosed = 1,
    // Lid opened.
    kOpened = 2,
  };

  State state@0;
};

// Bluetooth event info.
//
// NextMinVersion: 1, NextIndex: 1
[Stable]
struct BluetoothEventInfo {
  [Stable, Extensible]
  enum State {
    // This is required for backwards compatibility, should not be used.
    [Default] kUnmappedEnumField = 0,
    // Adapter is added.
    kAdapterAdded = 1,
    // Adapter is removed.
    kAdapterRemoved = 2,
    // Adapter property is changed.
    kAdapterPropertyChanged = 3,
    // Device is added.
    kDeviceAdded = 4,
    // Device is removed.
    kDeviceRemoved = 5,
    // Device property is changed.
    kDevicePropertyChanged = 6,
  };

  State state@0;
};

// Power event info.
//
// NextMinVersion: 1, NextIndex: 1
[Stable]
struct PowerEventInfo {
  [Stable, Extensible]
  enum State {
    // This is required for backwards compatibility, should not be used.
    [Default] kUnmappedEnumField = 0,
    // Device begins consuming from an external power source.
    kAcInserted = 1,
    // Device stops consuming from an external power source.
    kAcRemoved = 2,
    // System receives a suspend request.
    kOsSuspend = 3,
    // System completes a suspend request.
    kOsResume = 4,
  };

  State state@0;
};

// Audio event info.
//
// NextMinVersion: 1, NextIndex: 1
[Stable]
struct AudioEventInfo {
  [Stable, Extensible]
  enum State {
    // This is required for backwards compatibility, should not be used.
    [Default] kUnmappedEnumField = 0,
    // Audio underrun happens.
    kUnderrun = 1,
    // Audio severe underrun happens.
    kSevereUnderrun = 2,
  };

  State state@0;
};

// Audio jack event info.
//
// NextMinVersion: 1, NextIndex: 1
[Stable]
struct AudioJackEventInfo {
  [Stable, Extensible]
  enum State {
    // This is required for backwards compatibility, should not be used.
    [Default] kUnmappedEnumField,
    // Audio jack added.
    kAdd,
    // Aduio jack removed.
    kRemove,
  };

  State state@0;
};

// Implemented by clients who desire events.
//
// NextMinVersion: 1, NextIndex: 1
[Stable]
interface EventObserver {
  // Fired when an event happens.
  OnEvent@0(EventInfo info);
};

// Union of event info.
//
// NextMinVersion: 2, NextIndex: 8
[Stable, Extensible]
union EventInfo {
  // The default value for forward compatibility. All the unknown type will be
  // mapped to this.
  [Default] uint8 default_type@0;
  // Usb event info.
  UsbEventInfo usb_event_info@1;
  // Thunderbolt event info.
  ThunderboltEventInfo thunderbolt_event_info@2;
  // Lid event info.
  LidEventInfo lid_event_info@3;
  // Bluetooth event info.
  BluetoothEventInfo bluetooth_event_info@4;
  // Power event info.
  PowerEventInfo power_event_info@5;
  // Audio event info.
  AudioEventInfo audio_event_info@6;
  // Audio jack event info.
  [MinVersion=1] AudioJackEventInfo audio_jack_event_info@7;
};

// An enumeration of event categories.
//
// NextMinVersion: 2, NextIndex: 8
[Stable, Extensible]
enum EventCategoryEnum {
  // This is required for backwards compatibility, should not be used.
  [Default] kUnmappedEnumField = 0,
  kUsb = 1,
  kThunderbolt = 2,
  kLid = 3,
  kBluetooth = 4,
  kPower = 5,
  kAudio = 6,
  [MinVersion=1] kAudioJack = 7,
};
