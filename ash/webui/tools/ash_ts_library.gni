import("//third_party/material_web_components/rewrite_imports.gni")
import("//tools/grit/grit_rule.gni")
import("//tools/typescript/ts_library.gni")

# A wrapper over ts_library which provides some ash specific developer
# conveniences. Namely:
#
#   - Allows for the import of any generated file via a
#     "generated:path/to/file" import, assumes that the types are in the same
#     generated folder.
#   - Allows for the use of lit. When use_lit is set to true code can
#     import from the "lit" or "lit/decorators" packages.
#   - Allows for the use of lit decorators.
#
# In general all new ash typescript code should use this library.
template("ash_ts_library") {
  ts_library_target_name = "${target_name}__ts_library"

  # Intermediate directory we output our compiled TS to before transforming it
  # into it's final form.
  intermediate_dir = "$target_gen_dir/to_be_rewritten"

  ts_library(ts_library_target_name) {
    forward_variables_from(invoker, "*", [ "use_lit" ])
    out_dir = intermediate_dir
    if (!defined(path_mappings)) {
      path_mappings = []
    }
    if (!defined(deps)) {
      deps = []
    }

    if (defined(invoker.use_lit) && invoker.use_lit) {
      node_modules_path = "//third_party/material_web_components/components-chromium/node_modules"

      # When tsc encounters an import from "lit" it won't know where to look to get
      # the packages type information unless we provide a mapping of import to
      # path on disk to the .d.ts files. lit_mappings is such a mapping.
      lit_mappings = [
        [
          "lit",
          "$node_modules_path/lit-element/lit-element.d.ts",
        ],
        [
          "lit/*",
          "$node_modules_path/lit/*",
        ],

        # When tsc encounters a decorator it'll try to import the code to support
        # decorators from tslib. As such all code that uses decorators will attempt
        # to import from tslib.
        [
          "tslib",
          "$node_modules_path/tslib/tslib.d.ts",
        ],
      ]
      foreach(_lit_mapping, lit_mappings) {
        path_mappings += [ _lit_mapping[0] + "|" +
                           rebase_path(_lit_mapping[1], target_gen_dir) ]
      }

      deps += [ "//third_party/material_web_components:library" ]
    }

    # Tell tsc where to find generated files.
    path_mappings +=
        [ "generated:*" + "|" + rebase_path("$root_gen_dir/*", target_gen_dir) ]
  }

  # We want ash_ts_library to mimic ts_library as close as possible, as such we
  # want to generate a tsconfig with the name `tsconfig_${target_name}.json`,
  # however since the ts_library rule is called `${target_name}_raw` we generate
  # `tsconfig_${target_name}_raw.json`. This step copies the generate tsconfig
  # and names it `tsconfig_${target_name}.json` so downstream ts_libraries can
  # interact with ash_ts_library as if it was a ts_library itself.
  rename_ts_config_target_name = "${target_name}_rename_ts_config"
  copy(rename_ts_config_target_name) {
    sources = [ "$target_gen_dir/tsconfig_${ts_library_target_name}.json" ]
    outputs = [ "$target_gen_dir/tsconfig_${target_name}.json" ]

    deps = [ ":$ts_library_target_name" ]
  }

  rewrite_imports(target_name) {
    forward_variables_from(invoker, [ "testonly" ])

    import_mappings = [
      "lit|//resources/mwc/lit/index.js",
      "lit/decorators|//resources/mwc/lit/decorators.js",
    ]

    deps = [
      ":$rename_ts_config_target_name",
      ":$ts_library_target_name",
    ]

    base_dir = intermediate_dir
    out_dir = target_gen_dir
    if (defined(invoker.out_dir)) {
      out_dir = invoker.out_dir
    }

    in_files = []
    foreach(_file, invoker.in_files) {
      in_files += [ string_replace(_file, ".ts", ".js") ]
    }
  }
}
