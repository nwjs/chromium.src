# Copyright 2021 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This file provides the ability for our C++ toolchain to successfully
# link binaries containing arbitrary Rust code.
#
# By "arbitrary Rust code" I mean .rlib archives full of Rust code, which
# is actually a static archive.
#
# Those static libraries don't link as-is into a final executable because
# they're designed for downstream processing by further invocations of rustc
# which link into a final binary. That final invocation of rustc knows how
# to do two things:
# * Find the Rust standard library.
# * Remap some generic allocator symbols to the specific allocator symbols
#   in use.
# This file does both those things. Any C++ target containing Rust .rlibs
# should simply depend on :std within this file and it will be taken care of.
# In practice, this will in future be taken care of by a standard template
# used for each Rust source set, so that a typical user of Rust need not
# think about it.
#
# This is obviously a bit fragile - rustc might do other magic in future.
# But, linking with a final C++ toolchain is something often needed, and
# https://github.com/rust-lang/rust/issues/64191 aims to make this
# officially possible.

import("//build/config/compiler/compiler.gni")
import("//build/config/rust.gni")

if (toolchain_has_rust) {
  # List of Rust stdlib rlibs which are present in the official Rust toolchain
  # we are using from the Android team. This is usually a version or two behind
  # nightly. Generally this matches the toolchain we build ourselves, but if
  # they differ, append or remove libraries based on the
  # `use_chromium_rust_toolchain` GN variable.
  #
  # If the build fails due to missing symbols, it would be because of a missing
  # library that needs to be added here in a newer stdlib.
  stdlib_files = [
    "std",  # List first because it makes depfiles more debuggable (see below)
    "addr2line",
    "adler",
    "alloc",
    "cfg_if",
    "compiler_builtins",
    "core",
    "getopts",
    "gimli",
    "hashbrown",
    "libc",
    "memchr",
    "miniz_oxide",
    "object",
    "panic_abort",
    "panic_unwind",
    "proc_macro",
    "rustc_demangle",
    "std_detect",
    "test",
    "unicode_width",
    "unwind",
  ]

  # Different Rust toolchains may add or remove files relative to the above
  # list. That can be specified in gn args for anyone using (for instance)
  # nightly or some other experimental toolchain, prior to it becoming official.
  stdlib_files -= removed_rust_stdlib_libs
  stdlib_files += added_rust_stdlib_libs

  if (!use_unverified_rust_toolchain) {
    # rlib files which are distributed alongside Rust's prebuilt stdlib, but we
    # don't need to pass to the C++ linker because they're used for specialized
    # purposes.
    skip_stdlib_files = [
      "profiler_builtins",
      "rustc_std_workspace_alloc",
      "rustc_std_workspace_core",
      "rustc_std_workspace_std",
    ]
  }

  action("find_stdlib") {
    # Collect prebuilt Rust libraries from toolchain package and copy to a known
    # location.
    #
    # The Rust toolchain contains prebuilt rlibs for the standard library and
    # its dependencies. However, they have unstable names: an unpredictable
    # metadata hash is appended to the known crate name.
    #
    # We must depend on these rlibs explicitly when rustc is not in charge of
    # linking. However, it is difficult to construct GN rules to do so when the
    # names can't be known statically.
    #
    # This action copies the prebuilt rlibs to a known location, removing the
    # metadata part of the name. In the process it verifies we have all the
    # libraries we expect and none that we don't. A depfile is generated so this
    # step is re-run when any libraries change. The action script additionally
    # verifies rustc matches the expected version, which is unrelated but this
    # is a convenient place to do so.
    #
    # The action refers to `stdlib_files`, `skip_stdlib_files`, and the
    # associated //build/config/rust.gni vars `removed_rust_stdlib_libs` and
    # `added_rust_stdlib_libs` for which rlib files to expect.
    # `extra_sysroot_libs` is also used to copy non-std libs, if any.
    script = "find_std_rlibs.py"
    depfile = "$target_out_dir/stdlib.d"
    out_libdir = rebase_path(target_out_dir, root_build_dir)
    out_depfile = rebase_path(depfile, root_build_dir)

    # For the rustc sysroot we must include even the rlibs we don't pass to the
    # C++ linker.
    all_stdlibs_to_copy = stdlib_files + skip_stdlib_files
    args = [
      "--rust-bin-dir",
      rebase_path("${rust_sysroot}/bin", root_build_dir),
      "--output",
      out_libdir,
      "--depfile",
      out_depfile,

      # Due to limitations in Ninja's handling of .d files, we have to pick
      # *the first* of our outputs. To make diagnostics more obviously
      # related to the Rust standard library, we ensure libstd.rlib is first.
      "--depfile-target",
      stdlib_files[0],

      "--expected-rustc-version",
      rustc_version,
    ]

    if (!use_unverified_rust_toolchain) {
      args += [
        "--stdlibs",
        string_join(",", all_stdlibs_to_copy),
      ]
    }

    if (extra_sysroot_libs != []) {
      args += [
        "--extra-libs",
        string_join(",", extra_sysroot_libs),
      ]
    }

    args += [
      "--target",
      rust_abi_target,
    ]

    outputs = []
    foreach(lib, all_stdlibs_to_copy) {
      outputs += [ "$target_out_dir/lib$lib.rlib" ]
    }
    foreach(lib, extra_sysroot_libs) {
      outputs += [ "$target_out_dir/$lib" ]
    }
  }

  # Create a sysroot containing our std rlibs to pass to rustc invocations. This
  # gives better control of where rustc may pick libraries from.
  copy("rustc_sysroot") {
    deps = [ ":find_stdlib" ]
    sources = get_target_outputs(":find_stdlib")
    outputs = [ "$target_out_dir/rustc_sysroot/lib/rustlib/$rust_abi_target/lib/{{source_file_part}}" ]
  }

  config("rust_stdlib_for_rustc") {
    # Match the output directory of :rustc_sysroot
    sysroot = rebase_path("$target_out_dir/rustc_sysroot", root_build_dir)
    rustflags = [ "--sysroot=$sysroot" ]
  }

  # Use the sysroot generated by :rustc_sysroot. All Rust targets should depend
  # on this.
  group("std_for_rustc") {
    assert(
        enable_rust,
        "Some C++ target is including Rust code even though enable_rust=false")
    all_dependent_configs = [ ":rust_stdlib_for_rustc" ]
    deps = [ ":rustc_sysroot" ]
  }

  config("rust_stdlib_config") {
    ldflags = []
    out_libdir = rebase_path(target_out_dir, root_build_dir)
    foreach(lib, stdlib_files) {
      this_file = "$out_libdir/lib$lib.rlib"
      ldflags += [ this_file ]
    }
  }

  source_set("remap_alloc") {
    sources = [
      "immediate_crash.h",
      "remap_alloc.cc",
    ]
  }

  group("std") {
    assert(
        enable_rust,
        "Some C++ target is including Rust code even though enable_rust=false")
    all_dependent_configs = [ ":rust_stdlib_config" ]
    deps = [
      ":find_stdlib",
      ":remap_alloc",
    ]
  }
}
